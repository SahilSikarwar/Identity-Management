{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport web3 from \"../../ethereum/web3\";\nimport instanceID from \"../../ethereum/compiledID\";\nimport Layout from \"../../components/Layout\";\nimport { Table } from \"semantic-ui-react\";\nimport RequestRows from \"../../components/RequestRowsCompany\";\n\nvar ViewRequest = /*#__PURE__*/function (_Component) {\n  _inherits(ViewRequest, _Component);\n\n  var _super = _createSuper(ViewRequest);\n\n  function ViewRequest() {\n    var _this;\n\n    _classCallCheck(this, ViewRequest);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      rows: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"FetchData\", function _callee() {\n      var accounts, count, requests;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 2:\n              accounts = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(instanceID.methods.viewRequestLength(accounts[0]).call());\n\n            case 5:\n              count = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(count)).fill().map(function (element, index) {\n                return instanceID.methods.viewRequestHeader(accounts[0], index).call();\n              })));\n\n            case 8:\n              requests = _context.sent;\n              return _context.abrupt(\"return\", requests);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderRows\", function _callee2() {\n      var requests;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(_this.FetchData());\n\n            case 2:\n              requests = _context2.sent;\n\n              _this.setState({\n                rows: requests.map(function (request, index) {\n                  return __jsx(RequestRows, {\n                    key: index,\n                    id: index,\n                    request: request\n                  });\n                })\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(ViewRequest, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.renderRows();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body,\n          Cell = Table.Cell;\n      return __jsx(Layout, null, __jsx(Table, {\n        celled: true\n      }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"ID\"), __jsx(HeaderCell, null, \"User\"), __jsx(HeaderCell, null, \"Approval Status\"), __jsx(HeaderCell, null, \"View Document\"))), __jsx(Body, null, this.state.rows)));\n    }\n  }]);\n\n  return ViewRequest;\n}(Component);\n\nexport default ViewRequest;","map":{"version":3,"sources":["/home/sahil/Documents/Project/Capstone/Identity-Management/pages/company/viewrequest.js"],"names":["React","Component","web3","instanceID","Layout","Table","RequestRows","ViewRequest","rows","eth","getAccounts","accounts","methods","viewRequestLength","call","count","Promise","all","Array","parseInt","fill","map","element","index","viewRequestHeader","requests","FetchData","setState","request","renderRows","Header","Row","HeaderCell","Body","Cell","state"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;;IAEMC,W;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,IAAI,EAAE;AADA,K;;gEAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACaN,IAAI,CAACO,GAAL,CAASC,WAAT,EADb;;AAAA;AACJC,cAAAA,QADI;AAAA;AAAA,+CAEUR,UAAU,CAACS,OAAX,CACjBC,iBADiB,CACCF,QAAQ,CAAC,CAAD,CADT,EAEjBG,IAFiB,EAFV;;AAAA;AAEJC,cAAAA,KAFI;AAAA;AAAA,+CAMaC,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACJ,KAAD,CAAT,CAAL,CACGK,IADH,GAEGC,GAFH,CAEO,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACvB,uBAAOpB,UAAU,CAACS,OAAX,CACJY,iBADI,CACcb,QAAQ,CAAC,CAAD,CADtB,EAC2BY,KAD3B,EAEJT,IAFI,EAAP;AAGD,eANH,CADqB,CANb;;AAAA;AAMJW,cAAAA,QANI;AAAA,+CAeHA,QAfG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;iEAkBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACU,MAAKC,SAAL,EADV;;AAAA;AACPD,cAAAA,QADO;;AAGX,oBAAKE,QAAL,CAAc;AACZnB,gBAAAA,IAAI,EAAEiB,QAAQ,CAACJ,GAAT,CAAa,UAACO,OAAD,EAAUL,KAAV,EAAoB;AACrC,yBAAO,MAAC,WAAD;AAAa,oBAAA,GAAG,EAAEA,KAAlB;AAAyB,oBAAA,EAAE,EAAEA,KAA7B;AAAoC,oBAAA,OAAO,EAAEK;AAA7C,oBAAP;AACD,iBAFK;AADM,eAAd;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;wCAtBO;AAClB,WAAKC,UAAL;AACD;;;6BA8BQ;AAAA,UACCC,MADD,GACyCzB,KADzC,CACCyB,MADD;AAAA,UACSC,GADT,GACyC1B,KADzC,CACS0B,GADT;AAAA,UACcC,UADd,GACyC3B,KADzC,CACc2B,UADd;AAAA,UAC0BC,IAD1B,GACyC5B,KADzC,CAC0B4B,IAD1B;AAAA,UACgCC,IADhC,GACyC7B,KADzC,CACgC6B,IADhC;AAEP,aACE,MAAC,MAAD,QACE,MAAC,KAAD;AAAO,QAAA,MAAM;AAAb,SACE,MAAC,MAAD,QACE,MAAC,GAAD,QACE,MAAC,UAAD,aADF,EAEE,MAAC,UAAD,eAFF,EAGE,MAAC,UAAD,0BAHF,EAIE,MAAC,UAAD,wBAJF,CADF,CADF,EASE,MAAC,IAAD,QAAO,KAAKC,KAAL,CAAW3B,IAAlB,CATF,CADF,CADF;AAeD;;;;EAtDuBP,S;;AAyD1B,eAAeM,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport web3 from \"../../ethereum/web3\";\nimport instanceID from \"../../ethereum/compiledID\";\nimport Layout from \"../../components/Layout\";\nimport { Table } from \"semantic-ui-react\";\nimport RequestRows from \"../../components/RequestRowsCompany\";\n\nclass ViewRequest extends Component {\n  state = {\n    rows: null,\n  };\n\n  componentDidMount() {\n    this.renderRows();\n  }\n\n  FetchData = async () => {\n    const accounts = await web3.eth.getAccounts();\n    const count = await instanceID.methods\n      .viewRequestLength(accounts[0])\n      .call();\n\n    const requests = await Promise.all(\n      Array(parseInt(count))\n        .fill()\n        .map((element, index) => {\n          return instanceID.methods\n            .viewRequestHeader(accounts[0], index)\n            .call();\n        })\n    );\n    return requests;\n  };\n\n  renderRows = async () => {\n    var requests = await this.FetchData();\n\n    this.setState({\n      rows: requests.map((request, index) => {\n        return <RequestRows key={index} id={index} request={request} />;\n      }),\n    });\n  };\n\n  render() {\n    const { Header, Row, HeaderCell, Body, Cell } = Table;\n    return (\n      <Layout>\n        <Table celled>\n          <Header>\n            <Row>\n              <HeaderCell>ID</HeaderCell>\n              <HeaderCell>User</HeaderCell>\n              <HeaderCell>Approval Status</HeaderCell>\n              <HeaderCell>View Document</HeaderCell>\n            </Row>\n          </Header>\n          <Body>{this.state.rows}</Body>\n        </Table>\n      </Layout>\n    );\n  }\n}\n\nexport default ViewRequest;\n"]},"metadata":{},"sourceType":"module"}