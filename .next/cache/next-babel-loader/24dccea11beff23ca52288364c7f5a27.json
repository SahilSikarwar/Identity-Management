{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport web3 from \"../../ethereum/web3\";\nimport instanceID from \"../../ethereum/compiledID\";\nimport Layout from \"../../components/Layout\";\nimport { Table, Header, Grid, Button, Segment, Message, Tab } from \"semantic-ui-react\";\n\nclass ViewRequest extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"renderRows\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      const requestCount = instanceID.methods.viewRequestLength(accounts[0]).call();\n      const requests = await Promise.all(Array(parseInt(requestCount)).fill().map((element, index) => {\n        return campaign.methods.requests(index).call();\n      }));\n      return this.props.requests.map((request, index) => {\n        return __jsx(RequestRows, {\n          key: index,\n          id: index,\n          request: request,\n          address: this.props.address,\n          approversCount: this.props.approversCount\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body\n    } = Table;\n    return __jsx(Layout, null, __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"User Address\"), __jsx(HeaderCell, null, \"Approval Status\"), __jsx(HeaderCell, null, \"More info\"))), __jsx(Body, null, this.renderRows())));\n  }\n\n}\n\nexport default ViewRequest;","map":{"version":3,"sources":["/home/sahil/Documents/Project/Capstone/Identity-Management/pages/company/viewrequest.js"],"names":["React","Component","web3","instanceID","Layout","Table","Header","Grid","Button","Segment","Message","Tab","ViewRequest","accounts","eth","getAccounts","requestCount","methods","viewRequestLength","call","requests","Promise","all","Array","parseInt","fill","map","element","index","campaign","props","request","address","approversCount","render","Row","HeaderCell","Body","renderRows"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SACEC,KADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,MAJF,EAKEC,OALF,EAMEC,OANF,EAOEC,GAPF,QAQO,mBARP;;AAUA,MAAMC,WAAN,SAA0BX,SAA1B,CAAoC;AAAA;AAAA;;AAAA,wCACrB,YAAY;AACvB,YAAMY,QAAQ,GAAG,MAAMX,IAAI,CAACY,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMC,YAAY,GAAGb,UAAU,CAACc,OAAX,CAClBC,iBADkB,CACAL,QAAQ,CAAC,CAAD,CADR,EAElBM,IAFkB,EAArB;AAGA,YAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACR,YAAD,CAAT,CAAL,CACGS,IADH,GAEGC,GAFH,CAEO,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACvB,eAAOC,QAAQ,CAACZ,OAAT,CAAiBG,QAAjB,CAA0BQ,KAA1B,EAAiCT,IAAjC,EAAP;AACD,OAJH,CADqB,CAAvB;AAQA,aAAO,KAAKW,KAAL,CAAWV,QAAX,CAAoBM,GAApB,CAAwB,CAACK,OAAD,EAAUH,KAAV,KAAoB;AACjD,eACE,MAAC,WAAD;AACE,UAAA,GAAG,EAAEA,KADP;AAEE,UAAA,EAAE,EAAEA,KAFN;AAGE,UAAA,OAAO,EAAEG,OAHX;AAIE,UAAA,OAAO,EAAE,KAAKD,KAAL,CAAWE,OAJtB;AAKE,UAAA,cAAc,EAAE,KAAKF,KAAL,CAAWG;AAL7B,UADF;AASD,OAVM,CAAP;AAWD,KAzBiC;AAAA;;AA2BlCC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE5B,MAAAA,MAAF;AAAU6B,MAAAA,GAAV;AAAeC,MAAAA,UAAf;AAA2BC,MAAAA;AAA3B,QAAoChC,KAA1C;AACA,WACE,MAAC,MAAD,QACE,MAAC,KAAD,QACE,MAAC,MAAD,QACE,MAAC,GAAD,QACE,MAAC,UAAD,uBADF,EAEE,MAAC,UAAD,0BAFF,EAGE,MAAC,UAAD,oBAHF,CADF,CADF,EAQE,MAAC,IAAD,QAAO,KAAKiC,UAAL,EAAP,CARF,CADF,CADF;AAcD;;AA3CiC;;AA8CpC,eAAe1B,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport web3 from \"../../ethereum/web3\";\nimport instanceID from \"../../ethereum/compiledID\";\nimport Layout from \"../../components/Layout\";\nimport {\n  Table,\n  Header,\n  Grid,\n  Button,\n  Segment,\n  Message,\n  Tab,\n} from \"semantic-ui-react\";\n\nclass ViewRequest extends Component {\n  renderRows = async () => {\n    const accounts = await web3.eth.getAccounts();\n    const requestCount = instanceID.methods\n      .viewRequestLength(accounts[0])\n      .call();\n    const requests = await Promise.all(\n      Array(parseInt(requestCount))\n        .fill()\n        .map((element, index) => {\n          return campaign.methods.requests(index).call();\n        })\n    );\n\n    return this.props.requests.map((request, index) => {\n      return (\n        <RequestRows\n          key={index}\n          id={index}\n          request={request}\n          address={this.props.address}\n          approversCount={this.props.approversCount}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { Header, Row, HeaderCell, Body } = Table;\n    return (\n      <Layout>\n        <Table>\n          <Header>\n            <Row>\n              <HeaderCell>User Address</HeaderCell>\n              <HeaderCell>Approval Status</HeaderCell>\n              <HeaderCell>More info</HeaderCell>\n            </Row>\n          </Header>\n          <Body>{this.renderRows()}</Body>\n        </Table>\n      </Layout>\n    );\n  }\n}\n\nexport default ViewRequest;\n"]},"metadata":{},"sourceType":"module"}