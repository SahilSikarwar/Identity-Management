{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport web3 from \"../../../ethereum/web3\";\nimport instanceID from \"../../../ethereum/compiledID\";\nimport Layout from \"../../../components/Layout\";\nimport { Table } from \"semantic-ui-react\";\nimport RequestRowsUser from \"../../../components/RequestRowsUser\";\n\nclass ViewRequestUser extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      rows: null\n    });\n\n    _defineProperty(this, \"FetchData\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      const count = await instanceID.methods.viewRequestLength(accounts[0]).call();\n      const requests = await Promise.all(Array(parseInt(count)).fill().map((element, index) => {\n        return instanceID.methods.viewRequestHeader(accounts[0], index).call();\n      }));\n      return requests;\n    });\n\n    _defineProperty(this, \"renderRows\", async () => {\n      var requests = await this.FetchData();\n      this.setState({\n        rows: requests.map((request, index) => {\n          return __jsx(RequestRowsUser, {\n            key: index,\n            id: index,\n            request: request\n          });\n        })\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.renderRows();\n  }\n\n  render() {\n    const {\n      Header,\n      Row,\n      HeaderCell,\n      Body,\n      Cell\n    } = Table;\n    return __jsx(Layout, null, __jsx(Table, {\n      celled: true\n    }, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"RequestedBy\"), __jsx(HeaderCell, null, \"Approval Status\"), __jsx(HeaderCell, null, \"More info\"))), __jsx(Body, null, this.state.rows)));\n  }\n\n}\n\nexport default ViewRequestUser;","map":{"version":3,"sources":["/home/sahil/Documents/Project/Capstone/Identity-Management/pages/user/request/view.js"],"names":["React","Component","web3","instanceID","Layout","Table","RequestRowsUser","ViewRequestUser","rows","accounts","eth","getAccounts","count","methods","viewRequestLength","call","requests","Promise","all","Array","parseInt","fill","map","element","index","viewRequestHeader","FetchData","setState","request","componentDidMount","renderRows","render","Header","Row","HeaderCell","Body","Cell","state"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,eAAP,MAA4B,qCAA5B;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;AAAA;AAAA;;AAAA,mCAC9B;AACNO,MAAAA,IAAI,EAAE;AADA,KAD8B;;AAAA,uCAS1B,YAAY;AACtB,YAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMC,KAAK,GAAG,MAAMT,UAAU,CAACU,OAAX,CACjBC,iBADiB,CACCL,QAAQ,CAAC,CAAD,CADT,EAEjBM,IAFiB,EAApB;AAIA,YAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CACrBC,KAAK,CAACC,QAAQ,CAACR,KAAD,CAAT,CAAL,CACGS,IADH,GAEGC,GAFH,CAEO,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACvB,eAAOrB,UAAU,CAACU,OAAX,CACJY,iBADI,CACchB,QAAQ,CAAC,CAAD,CADtB,EAC2Be,KAD3B,EAEJT,IAFI,EAAP;AAGD,OANH,CADqB,CAAvB;AASA,aAAOC,QAAP;AACD,KAzBqC;;AAAA,wCA2BzB,YAAY;AACvB,UAAIA,QAAQ,GAAG,MAAM,KAAKU,SAAL,EAArB;AAEA,WAAKC,QAAL,CAAc;AACZnB,QAAAA,IAAI,EAAEQ,QAAQ,CAACM,GAAT,CAAa,CAACM,OAAD,EAAUJ,KAAV,KAAoB;AACrC,iBAAO,MAAC,eAAD;AAAiB,YAAA,GAAG,EAAEA,KAAtB;AAA6B,YAAA,EAAE,EAAEA,KAAjC;AAAwC,YAAA,OAAO,EAAEI;AAAjD,YAAP;AACD,SAFK;AADM,OAAd;AAKD,KAnCqC;AAAA;;AAKtCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AA8BDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA,UAAf;AAA2BC,MAAAA,IAA3B;AAAiCC,MAAAA;AAAjC,QAA0C/B,KAAhD;AACA,WACE,MAAC,MAAD,QACE,MAAC,KAAD;AAAO,MAAA,MAAM;AAAb,OACE,MAAC,MAAD,QACE,MAAC,GAAD,QACE,MAAC,UAAD,sBADF,EAEE,MAAC,UAAD,0BAFF,EAGE,MAAC,UAAD,oBAHF,CADF,CADF,EAQE,MAAC,IAAD,QAAO,KAAKgC,KAAL,CAAW7B,IAAlB,CARF,CADF,CADF;AAcD;;AArDqC;;AAwDxC,eAAeD,eAAf","sourcesContent":["import React, { Component } from \"react\";\nimport web3 from \"../../../ethereum/web3\";\nimport instanceID from \"../../../ethereum/compiledID\";\nimport Layout from \"../../../components/Layout\";\nimport { Table } from \"semantic-ui-react\";\nimport RequestRowsUser from \"../../../components/RequestRowsUser\";\n\nclass ViewRequestUser extends Component {\n  state = {\n    rows: null,\n  };\n\n  componentDidMount() {\n    this.renderRows();\n  }\n\n  FetchData = async () => {\n    const accounts = await web3.eth.getAccounts();\n    const count = await instanceID.methods\n      .viewRequestLength(accounts[0])\n      .call();\n\n    const requests = await Promise.all(\n      Array(parseInt(count))\n        .fill()\n        .map((element, index) => {\n          return instanceID.methods\n            .viewRequestHeader(accounts[0], index)\n            .call();\n        })\n    );\n    return requests;\n  };\n\n  renderRows = async () => {\n    var requests = await this.FetchData();\n\n    this.setState({\n      rows: requests.map((request, index) => {\n        return <RequestRowsUser key={index} id={index} request={request} />;\n      }),\n    });\n  };\n\n  render() {\n    const { Header, Row, HeaderCell, Body, Cell } = Table;\n    return (\n      <Layout>\n        <Table celled>\n          <Header>\n            <Row>\n              <HeaderCell>RequestedBy</HeaderCell>\n              <HeaderCell>Approval Status</HeaderCell>\n              <HeaderCell>More info</HeaderCell>\n            </Row>\n          </Header>\n          <Body>{this.state.rows}</Body>\n        </Table>\n      </Layout>\n    );\n  }\n}\n\nexport default ViewRequestUser;\n"]},"metadata":{},"sourceType":"module"}