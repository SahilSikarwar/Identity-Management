{"ast":null,"code":"const path = require(\"path\");\n\nconst fs = require(\"fs-extra\");\n\nconst solc = require(\"solc\");\n\nconst buildPath = path.resolve(__dirname, \"build\");\nfs.removeSync(buildPath);\nconst IDPath = path.resolve(__dirname, \"contracts\", \"IdentityManagement.sol\");\nconst source = fs.readFileSync(IDPath, \"utf8\");\nconst output = solc.compile(source, 1).contracts;\nfs.ensureDirSync(buildPath);\n\nfor (let contract in output) {\n  fs.outputJSONSync(path.resolve(buildPath, contract.replace(\":\", \"\") + \".json\"), output[contract]);\n}","map":{"version":3,"sources":["/home/sahil/Documents/Project/Capstone/Identity-Management/ethereum/compile.js"],"names":["path","require","fs","solc","buildPath","resolve","__dirname","removeSync","IDPath","source","readFileSync","output","compile","contracts","ensureDirSync","contract","outputJSONSync","replace"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,SAAS,GAAGJ,IAAI,CAACK,OAAL,CAAaC,SAAb,EAAwB,OAAxB,CAAlB;AACAJ,EAAE,CAACK,UAAH,CAAcH,SAAd;AAEA,MAAMI,MAAM,GAAGR,IAAI,CAACK,OAAL,CAAaC,SAAb,EAAwB,WAAxB,EAAqC,wBAArC,CAAf;AACA,MAAMG,MAAM,GAAGP,EAAE,CAACQ,YAAH,CAAgBF,MAAhB,EAAwB,MAAxB,CAAf;AAEA,MAAMG,MAAM,GAAGR,IAAI,CAACS,OAAL,CAAaH,MAAb,EAAqB,CAArB,EAAwBI,SAAvC;AAEAX,EAAE,CAACY,aAAH,CAAiBV,SAAjB;;AAEA,KAAK,IAAIW,QAAT,IAAqBJ,MAArB,EAA6B;AAC3BT,EAAAA,EAAE,CAACc,cAAH,CACEhB,IAAI,CAACK,OAAL,CAAaD,SAAb,EAAwBW,QAAQ,CAACE,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,IAA4B,OAApD,CADF,EAEEN,MAAM,CAACI,QAAD,CAFR;AAID","sourcesContent":["const path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst solc = require(\"solc\");\n\nconst buildPath = path.resolve(__dirname, \"build\");\nfs.removeSync(buildPath);\n\nconst IDPath = path.resolve(__dirname, \"contracts\", \"IdentityManagement.sol\");\nconst source = fs.readFileSync(IDPath, \"utf8\");\n\nconst output = solc.compile(source, 1).contracts;\n\nfs.ensureDirSync(buildPath);\n\nfor (let contract in output) {\n  fs.outputJSONSync(\n    path.resolve(buildPath, contract.replace(\":\", \"\") + \".json\"),\n    output[contract]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}